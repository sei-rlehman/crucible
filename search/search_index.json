{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"alloy/","title":"Alloy Overview DEMO CONTRIBUTION","text":"<p>Alloy joins the other independent Crucible apps together to provide a complete Crucible experience.</p>"},{"location":"alloy/#alloy-event-template","title":"Alloy Event Template","text":"<p>An Alloy event template is used to associate one or more of the individual Crucible applications, including a Player view, Caster directory, and Steamfitter scenario template. When an event template is launched, a new event is created.</p> <p>Only a system admin or a content developer can create or modify event templates in the Alloy administrator user interface. System admin and content developer permissions are granted to users in the Player administrator user interface.</p>"},{"location":"alloy/#alloy-event","title":"Alloy Event","text":"<p>Once the event template has been created, it can be used to create an Alloy event. The event is the actual running of a simulation.</p> <p>When the event template is launched, Alloy:</p> <ul> <li>clones the Player exercise specified in the event template</li> <li>creates a Caster workspace under the Caster directory specified in the event template</li> <li>creates and starts a Steamfitter session from the Steamfitter scenario specified in the event template</li> </ul> <p>Active, ended, and failed events can be viewed by a system admin or content developer in the Alloy administrator user interface.</p>"},{"location":"alloy/#alloy-settings","title":"Alloy Settings","text":"<p>When deploying the Alloy API, <code>ResourceOwnerAuthorization</code> settings must be configured for a system admin account so the Alloy API can make the necessary calls to the other API's.</p> <pre><code>  \"ResourceOwnerAuthorization\": {\n    \"Authority\": \"http://localhost:5000\",\n    \"ClientId\": \"alloy.api\",\n    \"ClientSecret\": \"\",\n    \"UserName\": \"\",\n    \"Password\": \"\",\n    \"Scope\": \"s3 s3-vm alloy steamfitter caster-api\",\n    \"TokenExpirationBufferSeconds\": 900\n  },\n</code></pre> <p>The default setting for the maximum number of active events per user is two. However, this can be changed in the <code>MaxEventsForBasicUser</code> setting.</p> <pre><code>  \"Resource\": {\n    \"MaxEventsForBasicUser\": 2\n  }\n</code></pre>"},{"location":"alloy/#alloy-user-interface","title":"Alloy User Interface","text":"<p>The Alloy user interface as viewed by a user consists of two screens:</p> <ul> <li>Labs: contains a list of event templates and labs available to the user.</li> <li>Launch: contains a view of a specific event template or lab. Here, the user can Launch an event if no active event exists for this user and event template combination. If an active event already exists, then the user can open it in Player or end it.</li> </ul> <p>Note: Currently, there is no error reporting when launching an event template or lab. If an error occurs, the user is returned to the Launch screen.</p>"},{"location":"alloy/definitions/","title":"Definition","text":"<p>An Alloy Definition brings together a Player View, a Caster Directory, and a Steamfitter Scenario Template to create an event that is user-launchable.  Events can be scheduled to run for a set ammount of time. Upon completion of the event, Alloy will clear up all related assets.</p>"},{"location":"alloy/definitions/alloy-how-to-create-a-definition/","title":"How to create an Alloy definition","text":"<p>Before creating an Alloy definition, the Player exercise, Caster directory, and Steamfitter scenario should be created. All of these components are actually optional for a definition, so a definition can have any combination of the three components.</p> <ol> <li>Add a new Definition.</li> <li>Complete the Name, Description, and Duration fields.</li> <li>Copy and paste the ID's of the Player exercise, Caster directory, and Steamfitter scenario.</li> <li>Save the Definition.</li> </ol> <p>To give the user the ability to end the implementation or lab from inside Player, add a link to the definition as a Player application in the associated Player exercise.</p>"},{"location":"alloy/definitions/alloy-how-to-create-a-definition/#understanding-the-launch-process","title":"Understanding the launch process","text":"<p>When launching an implementation from a definition, the Alloy API goes through the following process:</p> <ol> <li>Clones the definition Player exercise into a new Player exercise and adds the Player exercise ID to the Alloy implementation.</li> <li>Creates a Steamfitter session from the definition Steamfitter scenario and adds the Steamfitter scenario ID to the Alloy implementation.</li> <li>Creates a Caster workspace in the definition Caster directory and adds the Caster Workspace ID to the Alloy implementation.</li> <li>Creates a Terraform <code>auto.tfvars</code> file in the Caster workspace that contains the following:<ul> <li>Exercise ID</li> <li>Team Name and ID of every team in the exercise</li> <li>User Name and ID</li> </ul> </li> <li>Plans and applies the Caster workspace to deploy the infrastructure.</li> <li>Starts the Steamfitter scenario.</li> </ol>"},{"location":"alloy/definitions/alloy-how-to-create-a-definition/#understanding-the-end-process","title":"Understanding the end process","text":"<p>There are two ways the end process can be triggered: - user initiated, and - <code>AlloyQueryService</code> of the Alloy API initiated because expiration time has been reached.</p> <p>When the end process is initiated, the Alloy API goes through the following process:</p> <ol> <li>Deletes the Player exercise.</li> <li>Deletes the Steamfitter session.</li> <li>Plans and applies the destroy of the Caster workspace.</li> <li>Deletes the Caster workspace.</li> </ol>"},{"location":"caster/","title":"Caster Overview","text":"<p>Caster is the primary deployment component of the Crucible simulation framework. Caster is built around Terraform, an open source \"Infrastructure as Code\" tool. </p> <p>Caster is meant to provide a web interface that gives exercise developers a powerful and flexible way to create, share, and manage topology configurations. </p> <p>Initial versions of Caster focus on a web front-end for raw Terraform configurations and outputs. This gives advanced developers easier access to a powerful deployment tool. Targeted improvements to the experience for these users will be made in the future. Eventually, this system will be used to underpin a more user-friendly interface that will allow configurations to be pieced together with less or no writing of Terraform code directly. </p> <p>The goal is to create a tool that gives advanced users the power and flexibility that they desire, while also allowing novice users to take advantage of complex topologies created by advanced users or create their own simple ones easily.</p>"},{"location":"caster/#terraform-documentation","title":"Terraform Documentation","text":"<p>For more information on native Terraform constructs used in Caster, please refer to the Terraform documentation.</p>"},{"location":"caster/#caster-and-player-integration","title":"Caster and Player Integration","text":"<p>Caster is a standalone application and is not dependent upon Player or the other Crucible applications in the framework. However, there are some integrations that are desirable when using the components together. One natural integration is assigning Caster deployed virtual machines to teams within Player. This is done  by setting the <code>guestinfo.teamId</code> property of a <code>vsphere_virtual_machine</code> resource's <code>extra_config</code> setting to the <code>Id</code> of the Player Team. After each run, Caster will look for this property and register the virtual machine with the specified Team.</p> <p>Note: Terraform reboots a virtual machine if any of its <code>extra_config</code> properties are changed, including <code>guestinfo</code> variables.</p>"},{"location":"caster/hosts/","title":"Caster Hosts","text":"<p>A host consists of a name, datastore, and maximum number of virtual machines that it can support. Hosts are created and managed through the API. After a host is created, it can be assigned to an exercise. An exercise can have many hosts. </p> <p>Workspaces have an additional property, <code>DynamicHost</code>, which is usually set to <code>false</code>. When Alloy creates a workspace, this is set to <code>true</code>, and changes the behavior of a run. When <code>DynamicHost</code> is <code>true</code>, Caster examines all of the hosts assigned to the current exercise and chooses the one with the least usage (the number of machines to deploy/maximum machines) to assign to the workspace. </p> <p>Along with all of the files normally added to the run, Caster will create a <code>generated_host_values.auto.tfvars</code> containing two variable values: <code>vsphere_host_name</code> and <code>vsphere_datastore</code>, which will be set to the name and datastore of the selected host. When the run is applied, Caster tracks how many virtual machines are deployed to the host and uses it for future calculations. </p> <p>When the workspace is deleted after an on-demand exercise (ODX) is finished, the host's resources will be released. If a run attempts to deploy more virtual machines than there is capacity for in the available hosts, the run will fail.</p>"},{"location":"caster/hosts/#on-demand-exercise-functionality","title":"On-Demand Exercise functionality","text":"<p>Caster is called by Alloy in order to deploy resources for lab or ODX-style functionality. Caster itself does not differ in its main functionality of deploying workspaces and lets Alloy handle most of the ODX functionality. </p> <p>However, in order to support this functionality Caster dynamically selects a host to deploy to.</p> <p>Normally, the cluster or host to deploy to is embedded in the configuration - either directly or as a variable - and Caster doesn't concern itself with this. For ODX's, Caster does need to concern itself with:</p> <ul> <li>ensuring that resources are deployed evenly to the available hosts, and </li> <li>more ODX's than the hardware can deploy are not deployed. </li> </ul> <p>To address these concerns the concept of a host was added to Caster.</p>"},{"location":"caster/projects/","title":"Caster Project","text":"<p>The top-level construct in Caster is called a project. The project is a way to organize and categorize similar environments for multiple workspaces and directories within Caster. The main screen of Caster displays a list of the projects available and allows a user to create a new one.</p> <p>A project is meant to:</p> <ul> <li>Categorize large events (like Gaining Cyber Dominance, Cybercom, CyberFlag or MCCORC)</li> <li>House directories, workspaces, and sub-directories</li> </ul> <p>Users can add new projects, name projects, and save projects. A project's landing page in Caster has a navigation panel for easy movement within the project's files, workspaces, and directories. Projects can also be exported.</p>"},{"location":"caster/projects/caster-directory/","title":"Caster Directory","text":"<p>The top-level construct within a project is called a directory. A project can contain many directories. Directories contain files that make up a particular Terraform configuration, workspaces that represent a specific instance of that configuration, and sub-directories. Directories are meant to be used primarily for organization and shared resources.</p>"},{"location":"caster/projects/caster-directory/#directory-hierarchies","title":"Directory Hierarchies","text":"<p>Directories can contain sub-directories to create a hierarchy of directories and the configuration files contained within them. When a run is created in a workspace, the files in the workspace, the workspace's directory, and all parent directories are merged together and passed to Terraform as a single configuration. This eliminates redundancy when developing many environments that are largely the same, or sharing a set of common variables or data across many configurations. </p> <p>For example, a large deployment might have a top-level directory that defines global variables like <code>vlan ids</code> and <code>team ids</code> in use, and then sub-directories that define resources that use those variables.</p> <p>Users can add, rename, delete, or export a directory from the navigation panel on a project's main Caster page. </p> <p>Peer directories (directories that fall outside a parent directory) are not included in a run.</p>"},{"location":"caster/projects/caster-files/","title":"Caster Files","text":"<p>Files represent text files that will eventually be put onto a file system and used with the Terraform command line tool. Files can be named and edited through Caster, but file extensions are important and have specific meaning to Terraform. </p> <ul> <li><code>.tf</code> A configuration file that defines resources, variables, etc., in a Terraform configuration.</li> <li><code>.auto.tfvars</code> Contains the values to be used for variables defined in <code>.tf</code> files.</li> </ul> <p>Note: When working with Files in Caster CTRL+L locks/unlocks a file to prevent others from editing that file simultaneously. When locked, the file icon appears as a dashed line. When unlocked, the file icon appears solid. Files can also be locked by an administrator. A file is administratively locked to prevent anyone from changing that file. A lock icon in the top right corner of the file edit screen denotes that the file is administratively locked. CTRL+S saves a file.</p> <p>See the official Terraform Documentation for more details on supported file types and extensions. In the future, Caster may provide more guidance on what types of files can be created and what their contents are expected to be.</p>"},{"location":"caster/projects/caster-modules/","title":"Caster Modules","text":"<p>Modules are a Terraform construct:</p> <p>A module is a container for multiple resources that are used together. Modules can be used to create lightweight abstractions, so that you can describe your infrastructure in terms of its architecture, rather than directly in terms of physical objects.</p> <p>Modules are very powerful and allow for complex configurations to be made simpler and more easily shared and used. A module takes any Terraform configuration consisting of any number of resources and turns it into a single block, exposing required and/or optional variables. Some examples include:</p> <ul> <li>A generic virtual machine module that abstracts away commonly used parameters into variables such as: </li> <li>TeamId: sets <code>guestinfo.teamId</code> in <code>extra_config</code>.</li> <li>Networks: creates a NIC for each specified network and assigns it to the specified network vlan.</li> <li>ExerciseId: appends the <code>exerciseId</code> to the name of the vm for use with ODX's where unique naming is required.</li> <li>Other simplified variable names based on the target audience.</li> <li>A module to create a very specific type of virtual machine resource, such as a domain controller, that points to a known good VMware template/base disk and an Ansible playbook that requires variables such as:</li> <li>Domain Name</li> <li>IP Address</li> <li>DomainAdminUser</li> <li>DomainAdminPass</li> <li>A module to define an entire Cyber Flag enclave.</li> <li>A module to define a generic GreySpace that accepts variables to configure GreyBox, TopGen, etc.</li> </ul> <p>Modules allow for endless flexibility for developers to wrap whatever configuration they can create into a small package and describe to consumers of the module exactly what it does and what values it requires to function. </p> <p>Caster makes it easier to search for and use modules when building a Terraform configuration. </p> <p>Caster supports modules created as GitLab projects that are visible to the GitLabToken defined in the API settings with at least one version defined.  All versions will be shown in Caster when the project is added/refreshed to Caster.  </p> <p>Note:  Caster requires that the inputs file and the outputs file be written in JSON (that is, <code>variables.tf.json</code> and <code>ouptuts.tf.json</code>). </p> <p>There are three ways that the a module can be added/refreshed to Caster:</p> <ul> <li> <p>Every time that the modules list is requested, Caster API checks for updated modules in the Terraform-Modules group (the group ID is a Caster API setting) or any of its sub-groups.  If you add a module or version, you may have to refresh your Caster UI browser to see the change.</p> </li> <li> <p>Because the Caster UI uses its internal modified date to determine if there are any \"new\" changes, the Caster dates could get out of sync with the GitLab dates.  In this case, an administrator can force an update of all of the modules.</p> </li> <li> <p>An administrator can also individually add/refresh a module using its GitLab Project ID, whether or not it is underneath the Terraform-Modules group.</p> </li> </ul> <p>When editing a file in the Caster UI, a Modules sidebar can be opened to search through available modules.</p> <p>Upon selecting a Module, a form opens that allows the user to select the Version of the Module, and then complete the version-specific variables that the Module expects.</p> <p>Upon Submit, Caster generates the Terraform code that can be copied into a configuration file to use the selected module with the selected variable values.</p>"},{"location":"caster/projects/caster-run-plan-apply/","title":"Run, Plan, and Apply","text":"<p>A run is a specific instance of the Terraform plan and apply process for a workspace. The run is how the configuration in a directory is instantiated into deployed resources within a workspace. Upon opening a workspace, a list of runs is displayed. This is where plan or destroy operations are started. </p> <p>Plan and apply are specific Terraform terminologies. Every run is made up of a plan and an apply step. </p>"},{"location":"caster/projects/caster-run-plan-apply/#plan","title":"Plan","text":"<p>Clicking Plan will create a new Run and execute the \"terraform plan\" command on the given configuration. This raw Terraform output is shown to the user, and describes:</p> <ul> <li>What actions Terraform will take</li> <li>What resources will be created</li> <li>What resources will be changed</li> <li>What resources will be destroyed</li> </ul> <p>A plan shows the user what is going to be deployed.</p> <p>This output always ends with a summary of the form <code>Plan: x to add, y to change, z to destroy</code>. The user reviews this and chooses to apply or reject the plan. </p> <ul> <li>Choosing apply creates an apply for the run and executes <code>terraform apply</code> on the previously generated plan. This causes Terraform to actually make the changes described. </li> <li>Choosing reject invalidates the plan. No changes are made to the infrastructure. </li> </ul>"},{"location":"caster/projects/caster-run-plan-apply/#apply","title":"Apply","text":"<p>Apply takes a run, executes <code>Terraform apply</code> on the previously generated plan and deploys the resources for a workspace. The <code>Apply</code> command:</p> <ul> <li>Deploys a workspace run</li> <li>Releases plan tools such as network resources and virtual machines into VCenter</li> </ul> <p>Within the workspace view users can see all the runs that have been planned and applied.</p>"},{"location":"caster/projects/caster-run-plan-apply/#destroy-and-taint","title":"Destroy and Taint","text":""},{"location":"caster/projects/caster-run-plan-apply/#destroy","title":"Destroy","text":"<p>Selecting destroy instead of plan is largely the same, except the plan generated is one that will destroy all of the previously deployed resources in the workspace, rather than making the infrastructure match the current configuration. That is, Destroy creates a plan that will destroy all of the previously deployed resources in a workspace.</p> <p>Note: If a resource is defined in the configuration and created in a run and then deleted from the configuration, it is destroyed upon the next plan or destroy run. This is because a Terraform run always tries to match the infrastructure to the current configuration. </p> <p>Note: Only one run can be in progress at a time per workspace. Terraform locks the state of the workspace and only a single operation can be performed at a time. Developers may wish to break up large deployments into multiple directories and workspaces to operate on different parts of the deployments simultaneously.  For example: User enclaves may be broken out so developers can perform actions on other parts of a network without (potentially) waiting a long time to redeploy user machines.</p> <p>The workspace view allows users to see a table with all the runs that have been planned and applied within that directory. Runs highlighted in red are destroyed operations.</p> <p>Within the workspace view users can click <code>Destroy</code> to destroy live Terraform applications.</p> <p>This infrastructure as code approach is different than many developers may be used to. The general approach here is to define a configuration and apply it in its entirety, rather than selecting individual pieces to be deployed. There are some ways to target individual pieces of a configuration, but they are recommended by Terraform to be the exception rather than the rule and are not yet fully implemented in Caster.</p>"},{"location":"caster/projects/caster-run-plan-apply/#taint","title":"Taint","text":"<p>Taint is a flag on a resource that tells Terraform to destroy and recreate a new instance on the next plan-and-apply cycle.</p> <p>Taint allows users to redeploy resources. For example, if a user needs to redeploy a series of virtual machines, the user can:</p> <ol> <li>Taint these resources</li> <li>Run another plan-and-apply cycle that will redeploy the instance as if it was new from a template</li> </ol> <p>Some resources can't be tainted, however. </p> <p>Users can taint resources within the workspace view. Once a resource is tainted it will display in red shading. Users can also easily access the <code>Untaint</code> command while in workspace view before running another plan-and-apply cycle if they change their mind and decide to keep the resource.</p>"},{"location":"caster/projects/caster-workspace/","title":"Caster Workspace","text":"<p>A workspace represents a specific instance of a deployed Terraform configuration. The same configuration can be used to deploy virtual machines to multiple workspaces that differ only by the values set to certain variables. For example: a configuration for an enclave in a Cyber Flag exercise may be defined once, and then deployed to <code>flag00</code> through <code>flag30</code> workspaces - each creating a copy of the enclave. </p> <p>Workspaces can contain files, which extend the configuration of the directory for that specific workspace. This might include files specifying values for variables defined in the directory, or additional resources to be deployed only for that workspace.</p> <p>A workspace is where users:</p> <ul> <li>Create an instance of a Terraform configuration</li> <li>Run their plans (Runs are a specific instance of a Terraform plan; explained here)</li> <li>Manage the differences and the variables in their environments</li> </ul> <p>Users can access workspaces from a project's navigation pane in Caster. Users can add additional files, but not additional directories, to a workspace. The workspace view allows users to see all the runs that have been planned and applied. Runs shaded in red are destroyed operations, while runs in white signify various other status classifications.</p> <p>Users can <code>Plan</code>, <code>Destroy</code>, <code>Apply</code>, <code>Taint</code>, and <code>Reject</code> operations in real time in the workspace view.</p>"},{"location":"caster/terraform/","title":"Caster Terraform Configuration","text":"<p>This topic is for anyone who manages a Crucible instance who wants to configure their Terraform provider installation for Caster. Terraform can be configured to only allow certain providers to be downloaded from the Internet and used from a local Filestore. </p> <p>Documentation describing this can be found in HashiCorp's Terraform documentation: CLI Configuration File &gt; Provider Installation.</p> <p>For your reference, below is the <code>.terraformrc</code> file currently implemented in the SEI's CyberForce instance of Caster.</p> <p>In the SEI's instance, we want to be able to use any plugins in the <code>sei</code> or <code>mastercard</code> namespace that have been downloaded locally.  In addition, any of the <code>hashicorp</code> namespace providers in the <code>direct</code> section can be downloaded directly from the Internet without any operator intervention.  </p> <p>These plugins are then all cached in the <code>plugin_cache_dir</code> section, to save from downloading the providers during every Terraform <code>plan</code> and <code>apply</code>.</p>"},{"location":"caster/terraform/#sample-caster-terraform-configuration","title":"Sample Caster Terraform Configuration","text":"<pre><code>plugin_cache_dir = \"/terraform/plugin-cache\"\nprovider_installation {\n    filesystem_mirror {        \n        path = \"/terraform/plugins/linux_amd64\"\n        include = [            \n            \"registry.terraform.local/sei/*\",               \n            \"registry.terraform.local/mastercard/*\"        \n        ]    \n     }    \n     direct {        \n        include = [\n        \"hashicorp/vsphere\",\n        \"hashicorp/aws\",            \n        \"hashicorp/azurerm\",            \n        \"hashicorp/azuread\",            \n        \"hashicorp/null\",            \n        \"hashicorp/random\",            \n        \"hashicorp/template\",            \n        \"hashicorp/cloudinit\"        \n       ]    \n      } \n     }\n</code></pre>"},{"location":"player/","title":"Player","text":""},{"location":"player/#overview","title":"Overview","text":"<p>Player is the centralized interface where participants, teams, and administrators go to engage in a cyber event. In Player, participants view teams, applications, virtual environments, and third-party applications. The event experience is highly customizable by content developers.</p> <p>Think of Player as the front door to an event running on Crucible. Player is meant to: </p> <ul> <li>Provide a platform for individual participants on a team to view content in an exercise.</li> <li>Allow for quick navigation between various applications in the Crucible framework.</li> <li>Allow administrators to set what teams can see what applications.</li> </ul> <p>Applications can use Player roles and permissions as needed. Notifications can be sent to individual users, teams, or the entire exercise by an administrator or an application with proper permissions.</p> <p>Player is not meant to:</p> <ul> <li>Control any authentication or content within any application that it displays in a content panel.</li> <li>Provide any mechanisms for individual applications to communicate with each other.</li> <li>Provide any default applications.  However, some common applications can be consumed within an exercise.</li> </ul> <p>Descriptions of the common applications used in Player can be found in the Player Applications document.</p>"},{"location":"player/#key-player-concepts","title":"Key Player Concepts","text":"<p>Some key Player concepts are described below.</p>"},{"location":"player/#apps","title":"Apps","text":"<p>A website a participant in a view can open within Player or in a separate browser tab. A common example of an app used in Player is the Mattermost messaging platform.</p>"},{"location":"player/#app-template","title":"App template","text":"<p>The settings associated with an app that is added to a team's view.  An app template can be created for common apps that are added to a view with default settings that an administrator can override if needed.</p>"},{"location":"player/#authentication","title":"Authentication","text":"<p>Player uses <code>IdentityServer 4</code> for authenticating users. Authentication gets a user into Player, but setting permissions within the Player Administration view (under Users) determines what a user can open and/or edit within Player.</p>"},{"location":"player/#focused-application-panel","title":"Focused Application Panel","text":"<p>The focused app panel displays the selected application in an iFrame. The iFrame points to the URL specified by the application template. The application within the focused app panel is responsible for authentication and content. Player displays content but has no control of the application running within the focused app panel.</p>"},{"location":"player/#notification","title":"Notification","text":"<p>A message sent to a specific user, team, or view from an Administrator or an app that has been given permission.</p>"},{"location":"player/#permission","title":"Permission","text":"<p>A key/value pair that can be created and used by any application given permission within the system. A permission can be assigned to a user or a team. Some permissions such as <code>SystemAdmin</code> are read-only. <code>ExerciseAdmin</code> and <code>SystemAdmin</code> are permanent permissions that cannot be edited or deleted.</p>"},{"location":"player/#role","title":"Role","text":"<p>A set of permissions that can be grouped together and assigned to a user or team.</p>"},{"location":"player/#team","title":"Team","text":"<p>A group of logged in users who are associated with a view. Each team can be configured to view a particular set of applications and be granted team-level roles/permissions.</p>"},{"location":"player/#user","title":"User","text":"<p>A user who is identified in an Identity Server configured for the Player system is automatically added into Player upon the first login. In addition, users can be pre-loaded into Player using the Player API.</p> <p>Note: IdentityServer4 is an OAuth 2.0 framework that is used by the Software Engineering Institute to authenticate users. Some Identity servers are configured to authenticate using CAC cards while others are user/password based - depending upon the location of the system.</p>"},{"location":"player/#view","title":"View","text":"<p>These are the settings associated with building a view. A view can be edited, cloned, and deleted.</p>"},{"location":"player/#views","title":"Views","text":"<p>The collection of content a participant can interact with during a cyber simulation. Depending upon your role (end-user view  versus administrator view) a view will look different.</p>"},{"location":"player/applications/","title":"Player Applications","text":"<p>Every Exercise in Player contains applications.  Applications are served elsewhere and viewed in a content panel in the Player user interface.  If the application requires authentication, we recommended you configure it to use the same identity server used by Player for the best user experience. The following are applications used in Player:</p> <ul> <li>Virtual Machines (VM-UI and VM-Console)</li> <li>Help desk using osTicket</li> <li>Messaging with Mattermost</li> <li>General Document Links (PDF, PNG, etc.)</li> </ul>"},{"location":"player/applications/#working-with-applications","title":"Working with Applications","text":"<p>All system allows Applications to be opened within a tab on the same screen or popped out into a new browser tab using the arrow.</p>"},{"location":"player/applications/#virtual-machines-vm-ui-and-vm-console","title":"Virtual Machines (VM-UI and VM-Console)","text":"<p>The VM List is set up to provide links to any virtual machines that the user has permission to view. The tabular system allows the VM to be opened similar to an Application, within a tab on the same screen or popped out into a new browser tab using the icon. Users can also run commands on one or more virtual machines by dragging a box and shift clicking.</p>"},{"location":"player/applications/#player-vm-console-application","title":"Player VM Console application","text":"<ul> <li>Load VMware consoles</li> <li>Power On/Off VMs</li> <li>Copy/Paste</li> <li>Send files/Mount ISOs</li> </ul>"},{"location":"player/applications/#help-desk-using-osticket","title":"Help desk using osTicket","text":"<p>osTicket (https://osticket.com/), a widely-used open source support ticket system, can be configured and deployed for an exercise. Using this \"built-in\" help desk, participants can submit help requests to event administrators.</p>"},{"location":"player/applications/#messaging-with-mattermost","title":"Messaging with Mattermost","text":"<p>Mattermost (https://mattermost.com/), an open source messaging platform can be configured and deployed to provide an \"off the shelf\" chat system for users. </p>"},{"location":"player/applications/#general-document-links","title":"General document links","text":"<p>Any documents or files  - PDF, PNG, etc. - that can be served on the web can be easily set up as an application for viewing.  This is particularly helpful for displaying instructions, intel, maps, and other information.</p>"},{"location":"player/applications/player-create-new-app-template/","title":"Player How to: Create a new App Template","text":"<p>An app template  contains the settings associated with an app that is added to a team's view.  An app template can be created for common apps that are then added to a view. Default settings that are part of the app template can be overridden by a view admin if needed. An app template can be used by any view admin when adding apps to a particular view.  Think of app templates as helpers for configuring common Crucible apps.</p> <p>Follow the procedures below to create a new app template in Player. These instructions assume that you have been given the appropriate permissions in Player to create a view.</p> <p>If you have not already done so, in the dropdown next to your username, select View Administration.</p> <p> 1. Under the Administration nav panel, select Application Templates. 2. Click Add Application Template.     - Enter a Name for the app template.    - Enter a URL for the app template.    - Enter the path for the icon.</p> <ol> <li>Enable Embeddable if desired. Ebeddable is a true/false attribute that tells Player whether or not the app is supported by iFrames.  The Mattermost chat, for example, is not embeddable and must be opened in a separate browser tab.</li> <li>Enable Load in background if desired. Load in background is a true/false attribute that tells Player to load the app in a hidden iFrame when Player loads.  This is important for some apps that may require some initialization.</li> </ol>"},{"location":"player/maps/","title":"Player Maps","text":"<p>The Maps application allows Player users who have View Administrator (ViewAdmin) permissions on the view to create, edit, and delete \"clickable\" maps of systems and environments in a simulation. A common example of a map is a network topology where selecting a system on the topology launches the associated VM.</p> <p>Assuming that View Administrator permissions have been granted, in Player add the map application to the view.</p>"},{"location":"player/maps/#adding-the-map-application-to-the-view","title":"Adding the Map application to the view","text":"<ol> <li>In Player, in your present view, select your user name and then Edit View.</li> <li>Under Applications, select Add New Application then Templates, then Map.</li> <li>The Select Map dropdown and the New Map icon appear in the right pane.</li> </ol>"},{"location":"player/maps/#creating-a-new-map","title":"Creating a new map","text":"<ol> <li>In the newly created Map application, in the right pane, select New Map.</li> <li>Complete the following fields:</li> <li>Name: the name of the map.   </li> <li>Select Image: from the dropdown, select an image. The images you see here are images that have been previously uploaded to the view by the View Admin and assigned to a team.   </li> <li>External Image URL: enter the URL of an external image if no image has been attached to the view or if you want to use a different image than what is available.   </li> <li>Teams: only the teams selected here will see the new map.    <p>Note that you can select more than one team here.</p> </li> <li>Click Submit. The image of the new map appears in the right pane.</li> </ol>"},{"location":"player/maps/#editing-a-map","title":"Editing a map","text":"<ol> <li>In Player's left navigation pane, click the Map application. </li> <li>In the right pane, select a map from the Select Map dropdown.</li> <li>Click the Edit icon. From here, you can:</li> <li>Edit Properties: allows you to change the name, images, and teams of the map.</li> <li>Discard Changes: allows you to discard changes you made to the map; for example, adding a click point.</li> <li>Save: saves your map.</li> <li>Click in the map to add a click point.</li> </ol>"},{"location":"player/maps/#adding-a-click-point","title":"Adding a click point","text":"<p>A click point is a location on the map that when clicked by Player user launches a resource like a virtual machine in a new tab. To add a click point to the map:</p> <ol> <li>In Player's left navigation pane, click the Map application. </li> <li>In the right pane, select a map from the Select Map dropdown.</li> <li>Click the Edit icon.</li> <li>Click anywhere in the map to launch the Add Click Point modal. If your map is a network topology diagram with network elements--routers, switches, firewalls, servers, etc.--then you may want to click on an element that represents the VM resource you want the user to launch. </li> <li>Radius: by default, the value is 3.</li> <li>Resource: this is the virtual machine (or another map) that launches when clicked. The VMs that appear here are the VMs from the VM application in the current view.</li> <li>Enter Custom Resource URL: enable this if you want to link to something other than the view's VMs and maps that are available above. For example, you could place a click point labeled \"Linux Help\" that links to relevant Linux documentation.</li> <li>Label: this is how the click point is labeled on the map. If your click point is over top of an element that launches a Windows 10 Administrator Workstation, then it makes sense to label it \"Win 10 Admin\".</li> <li>Click Save to save the new click point in the map.</li> <li>Click Save again to save the map.</li> </ol>"},{"location":"player/maps/#deleting-a-click-point","title":"Deleting a click point","text":"<ol> <li>In Player's left navigation pane, click the Map application. </li> <li>In the right pane, select a map from the Select Map dropdown.</li> <li>Click the Edit icon.</li> <li>Click an existing click point.</li> <li>In the Edit Click Point modal, click Delete.</li> </ol>"},{"location":"player/maps/#deleting-a-map","title":"Deleting a map","text":"<ol> <li>In Player's left navigation pane, click the Map application. </li> <li>In the right pane, select a map from the Select Map dropdown.</li> <li>Click Delete Map.</li> </ol>"},{"location":"player/views/","title":"Player Views","text":"<p>The collection of content a participant can interact with during a cyber simulation is called the view. Depending upon your role (end-user view  versus administrator view) a view will look different.</p>"},{"location":"player/views/#view-as-seen-by-the-end-user","title":"View: As seen by the end-user","text":""},{"location":"player/views/#collapsible-navigation-panel","title":"Collapsible navigation panel","text":"<p>The left application navigation panel can be collapsed to provide additional display space. This side-bar is configurable per team by an administrator.</p>"},{"location":"player/views/#application-navigation-bar","title":"Application navigation bar","text":"<p>In the view, the navigation bar on the left contains applications.</p>"},{"location":"player/views/#focused-app-panel","title":"Focused app panel","text":"<p>The focused app panel displays the selected app.</p>"},{"location":"player/views/#notifications","title":"Notifications","text":"<p>Receive and read notifications here.</p> <p>Tip! If your browser is set up to allow notifications you can receive Player notifications that way too.</p>"},{"location":"player/views/#top-bar","title":"Top bar","text":"<p>The top bar displays the current view name, team, and the menu select dropdown (your username in the top right).</p> <p>Player fully supports users who are on multiple teams.  Any such user, when logged in, can switch their team by using the team drop-down. </p>"},{"location":"player/views/#menu-select","title":"Menu select","text":"<p>Log off here. If you are a view administrator, you have the option to edit the view from here. The option to enable Dark Theme is here too.</p>"},{"location":"player/views/#view-as-seen-by-the-administrator","title":"View: As seen by the administrator","text":"<p>A Player view administrator will see the Administration navigation bar on the left. To switch to the administrator view in Player if you have the appropriate permissions:</p> <p>In the top-right corner, click the dropdown next to your user name, then Administration.</p> <p>Important! Only users who have the SystemAdmin permission can view the Administration screen and the Administration nav bar (Views, Users, Application Templates, Roles / Permissions).</p>"},{"location":"player/views/#views","title":"Views","text":"<p>Views is where a Player view administrator adds a new view and browses existing views. For step-by-step instructions on how to create a new view, see Player How to: Create a new View.</p>"},{"location":"player/views/#users","title":"Users","text":"<p>Users are only available in Player after they have successfully authenticated via the identity server and opened Player in their browser. Users and/or teams can be assigned any set of Permissions: </p> <ul> <li>SystemAdmin: can edit anything in Player; SystemAdmin permissions are given by existing SystemAdmin.</li> <li>ViewAdmin: can edit anything within a View that they have permissions.</li> </ul> <p>A SystemAdmin creates the View and assigns ViewAdmin permissions to specific teams who can now edit that View.</p> <p>Users and/or teams can be assigned to a Role, which is a group of permissions. More about roles as future Player development is completed. Only a SystemAdmin can create roles. </p>"},{"location":"player/views/#application-templates","title":"Application Templates","text":"<p>Think of application templates as \"helpers\" for adding new or common applications to Player. For example, the Virtual Machines application template contains several URLs. Including them in a template means that these values may be used over and over as part of a template--rather than manually entering the same information over and over again with each new view. </p> <p>In the Player system, creating a new application template is a relatively rare occurrence when compared to creating a view. Create the application templates first because you will use them on each view.</p> <p>For step-by-step instructions on how to create a new application template, see Player How to: Create a new App Template.</p>"},{"location":"player/views/player-copy-and-paste-text/","title":"Player How to: Copy and paste text","text":"<p>The procedures below show you how to:</p> <ul> <li>Copy text from a local machine (that is, an out-of-game computer) and paste it into a Player virtual machine, and</li> <li>Copy text from a Player virtual machine and paste it into a local machine</li> </ul> <p>Procedures assume you are in the Player VM Console app. For help on Player applications, see the Player Applications guide.</p>"},{"location":"player/views/player-copy-and-paste-text/#from-local-to-player-vm","title":"From local to Player VM","text":"<p>Note: There is a 64K size limitation to the text block users can copy into and out of the player.</p> <ol> <li>On your local machine, open a text file or Word file.</li> <li>Select and copy the text you want to place into a Player virtual machine.</li> <li>In the Player VM Console app, select the virtual machine you want.</li> <li>Select where in the virtual machine you want the copied text to go (this can be a new file or an open application).</li> <li>At the top of the Player window, click Paste. This inserts the copied text into the virtual machine.</li> </ol>"},{"location":"player/views/player-copy-and-paste-text/#from-player-vm-to-local","title":"From Player VM to local","text":"<ol> <li>In the Player VM Console app, select the virtual machine you want.</li> <li>On the virtual machine, select the text you would like to copy. Copy your text first to the virtual machine\u2019s clipboard (how you do this depends upon the application you\u2019re using).</li> <li>Once you\u2019ve copied your text to the virtual machine clipboard, click Copy at the top of the Player window. You should then see a <code>Copied Virtual Machine Clipboard</code> confirmation message.</li> <li>On your local machine, paste the copied text into a Notepad file or Word file.</li> </ol>"},{"location":"player/views/player-create-new-view/","title":"Player How to: Create a new View","text":"<p>Follow the procedures below to create a new view in Player. These instructions assume that you have been given the appropriate permissions in Player to create a view.</p> <p>If you have not already done so, in the dropdown next to your username, select Administration.</p>"},{"location":"player/views/player-create-new-view/#step-1-complete-view-information","title":"Step 1: Complete View Information","text":"<ol> <li>Under Views, click Add New View.</li> <li>Add a Name and View Description.</li> <li>In the Status dropdown, select Active or Inactive.</li> <li><code>Active</code> means that the new view is available for use immediately.</li> <li><code>Inactive</code> means that the new view will be cloned in Alloy.</li> <li>Select Applications.</li> </ol>"},{"location":"player/views/player-create-new-view/#step-2-add-new-applications","title":"Step 2: Add new applications","text":"<ol> <li>Under Applications, click Add New Application. Here, you can add a blank application or an application based upon an existing app template. </li> <li>Blank Application: Adding a blank application requires you to enter the configuration settings manually. These settings can't be applied in another view; they are one-time use only.</li> <li>Template: You should have several application templates available to choose from. These are templates that you or another administrator have created to use over and over. The configuration settings are set in the template; the template can be used many times. Application template settings can be overridden for a particular view. For help understanding application templates, see the Player Guide and the Player How to: Create a new App Template.</li> <li>Click Teams.</li> </ol>"},{"location":"player/views/player-create-new-view/#step-3-add-new-teams","title":"Step 3: Add new teams","text":"<ol> <li> <p>Click Add New Team. Multiple teams can be added to a view.</p> </li> <li> <p>Enter a Team Name.</p> </li> <li> <p>Assign a Role to the team.</p> </li> <li> <p>Assign Permissions to the team. Each team can be assigned special permissions. You may want to have a team of \"admins\" who can troubleshoot views in addition to teams comprised of regular users who are participating in the simulation.</p> </li> <li> <p>Click the User icon to select users to add to the new team.</p> </li> <li> <p>Search for the user whom you want to add. </p> </li> <li>Click Add User to move the user from All Users to Team Users.</li> <li>Under Team Users, you can assign a Role to the user at this time.</li> <li> <p>Click Done when you are finished adding users to the team.</p> </li> <li> <p>Assign applications to the new team.</p> </li> <li> <p>Next to the new team, click Add Application. Select an application from the list. These are the applications you added above. Each team you create gets a list of applications displayed in the Player application bar in the order defined here.</p> </li> </ol>"},{"location":"player/views/player-create-new-view/#step-4-upload-files","title":"Step 4: Upload Files","text":"<p>In this step, View Administrators upload a single file or multiple files simultaneously to a View which can be added as an application and attached to a team. </p> <ol> <li>Under Files, click Choose File and select the file you want to upload. The file appears under Staged Files - it has not been uploaded yet. </li> <li>Select the Team(s) that you want to access the file and click Upload Staged File(s).</li> <li>The file appears under Uploaded Files. From here, you can: Download the file, Delete the file, Copy Link to the file, Edit the name and team of the file, and Add File as Application.</li> </ol> <p>After adding the file as an application you have to return to Step 3 Teams and add that application - the newly uploaded file - to a team just as you would add any new application.</p> <p>Click Done when you are finished adding or updating the view.</p>"},{"location":"player/views/player-follow-user/","title":"Following a Participant","text":"<p>The user follow feature in Player allows you to virtually look over a participant\u2019s shoulder during a scenario. This is a useful feature when helping someone troubleshoot and for team members who are geographically separated. This can also be used by observers when evaluating or watching teams perform during an event.</p> <p>To follow another participant:</p> <ol> <li>In Player, in the left sidebar, select the Virtual Machines application.</li> <li>In the main Player window, select User List. <p>If you are a View Administrator (ViewAdmin), then you will see all the teams and all the participants. Otherwise, you will just see the team you are on and your teammates. </p> </li> <li>Locate the participant in the scenario.</li> <li>Use the Search feature to search on a participant's username if you know it.</li> <li>Click Expand All to expand the teams to see all of the participants.</li> <li>Click Collapse All to collapse the teams.</li> <li>Select a team to expand it and see its participants.</li> <li>Check Hide Inactive to display only those participants who are working in a virtual machine at the moment.</li> <li>Click the participant\u2019s name. Now, you can see the console display for the virtual machine that the person is on in the main Player window. </li> <li>Click the icon next to the participant's name to follow that participant in a new browser tab. </li> </ol> <p>If the person switches virtual machines then your display automatically follows them. You can\u2019t interact with them while following; and, if their virtual machine goes out of focus then following stops. </p> <p>Clicking the gear icon in the upper left of the display you are following gives you the options to Open In New Tab and Reconnect. If you are already in a new browser tab, then you will see the Fullscreen option.</p>"},{"location":"player/views/player-how-to-upload-files/","title":"Player How to: Upload files","text":""},{"location":"player/views/player-how-to-upload-files/#upload-from-local-to-vm","title":"Upload from local to VM","text":"<p>These procedures describe how to upload files from a local machine (an out-of-game computer) to a virtual machine in the Player VM Console app. Please note the Send File to VM option should only be used for uploading small files.</p> <p>These procedures assume you are in the Player VM Console app. For help on Player applications, see the Player Applications guide.</p> <ol> <li>In the Player VM Console app, in the VM List, launch the virtual machine you want.</li> <li>On the VM tab, click the gear icon, and then select Files, Send File to VM.</li> </ol> <p>If the Send File to VM option is grayed out you will have to enter the credentials used to log into the virtual machine. Select Enter VM Credentials. In the VM Send File Settings window, enter the Destination File Path, Username, and Password. Click Done. Any user registered for the exercise will have the virtual machine credentials.</p> <ol> <li>After entering your credentials, select the Send File to VM option (this should no longer be grayed out). </li> <li>Select the file from your local machine that you want to upload.</li> <li>Click Open. This will copy the file to the destination folder specified in the VM Send File Settings window.</li> </ol>"},{"location":"player/views/player-how-to-upload-files/#upload-files-and-mount-iso","title":"Upload files and mount ISO","text":"<p>These procedures describe how to upload files from a local machine to be mounted as a DVD (files are not uploaded directly to a virtual machine \u2013 it\u2019s a two-step process). This is useful for installers and uploading larger files (such as ISO files).</p> <ol> <li>In the VM List screen, click Upload File.</li> <li>On your local machine, select the file you want to upload (the upload may take some time depending upon the file size, so you will see a progress bar highlighting the upload progress).</li> <li>Click Open.</li> <li>On the VM tab, click the gear icon, and then select Files, Mount File to DVD.</li> <li>In the Search box that opens look for and select the uploaded file that you now want to mount.</li> </ol> <p>Note that there are two file areas: Team Files and Public Files. Files can be mounted for only your team (under Team Files) or any team (under Public Files).</p> <ol> <li>Click Mount. This process automatically mounts the file as a DVD Drive ISO.</li> <li>After the ISO has been mounted/used for file copy, right-click the DVD Drive ISO and and select Eject to eject the ISO.</li> </ol>"},{"location":"player/views/player-power-a-vm-on-or-off/","title":"Player How to: Power a VM on or off","text":"<p>The procedures below show you how to remotely power a VM on or off from within the Player VM Console app. These procedures assume you are in the Player VM Console app. </p> <p>For help on Player applications, see the Player Applications guide.</p> <ol> <li>In the Player VM Console app, select the virtual machine you want.</li> <li>On the VM tab, click the gear icon, then Power. You have the menu options to Power On, Power Off, and Reboot.</li> </ol>"},{"location":"steamfitter/","title":"Steamfitter Overview","text":"<p>Steamfitter gives content developers the ability to create scenarios consisting of a series of scheduled tasks, manual tasks, and injects which run against virtual machines during an event. These scenarios enable the content developer to automate assessments and configurations.</p> <p>In the Steamfitter UI, there are four major functional sections:</p> <ul> <li>Scenario Templates: Used to organize tasks into groups that that can be reused on demand.</li> <li>Scenarios: Displays all planned, running, and completed scenarios.</li> <li>Tasks: Used to create and execute ad-hoc tasks. </li> <li>History: Displays the results of all tasks executed by the user.</li> </ul>"},{"location":"steamfitter/#steamfitter-permissions","title":"Steamfitter Permissions","text":"<p>In order to use Steamfitter, a user must be given Content Developer permissions by a Steamfitter System Admin. Any user who visits the Steamfitter URL is automatically added to the user list with no permissions. Only a Steamfitter System Admin can grant another user elevated permissions.</p> <ol> <li>In Steamfitter, in the top-right corner, select your user name then Administration.</li> <li>Check the ContentDeveloper box next to the name of the user. </li> <li>Select your user name then Exit Administration.</li> </ol> <p>Content Developer and System Administrator within Steamfitter only apply to the Steamfitter application - not to any other application in the Crucible framework.</p>"},{"location":"steamfitter/history/","title":"Steamfitter History","text":"<p>The default History view shows task results for the current user sorted in reverse chronological order. However, you can also view history by User, View, and VM. Sorting and filtering are also available in the history results.</p>"},{"location":"steamfitter/scenario-templates/","title":"Index","text":""},{"location":"steamfitter/scenario-templates/#steamfitter-scenario-templates","title":"Steamfitter Scenario Templates","text":"<p>Scenario templates are where predefined tasks are grouped; scenario templates are used to create scenarios that can be run on-demand. All that is required to enter a new scenario template is a Name, Description, and Duration.</p> <p>After adding the new scenario template, you can Create a Scenario, Copy a scenario template to create a duplicate, Edit it, and Delete it.</p> <p>Add tasks in the Scenario Templates screen by clicking the + (\"plus\") icon. Complete the same task information as you did when you created a new task. For additional help, see Steamfitter Tasks.</p>"},{"location":"steamfitter/scenarios/","title":"Index","text":""},{"location":"steamfitter/scenarios/#steamfitter-scenarios","title":"Steamfitter Scenarios","text":"<p>Scenarios are groupings of predefined tasks that can be executed against a required view's VMs.</p> <p>After the tasks are defined in the scenario template the next step is to create the scenario.  Keep in mind that the scenario template is the plan; the scenario is the actual instance. Multiple scenarios can be created from one template; those scenarios can then be associated with different Player views.  </p> <p>In the Scenarios screen, the created scenario is named <code>scenario template name</code> - <code>your username</code> by default. </p> <p>Select the newly added scenario from the scenario list. Now, you can edit the Name and Description and you also have the View dropdown. A scenario must be associated with one specific Player view. </p> <p>Start and End dates and times can be changed here.</p> <p>As you would expect, the same tasks you attached to the scenario template appear in the scenario. Editing them in the scenario only changes them in this scenario. If you want the tasks to be changed for all scenarios based upon the template, then you will have to edit the tasks in the scenario template.</p>"},{"location":"steamfitter/scenarios/#starting-a-scenario","title":"Starting a Scenario","text":"<p>In order for tasks to execute, a task has to be started. </p> <p>If the Start Scenario button is not enabled that means that you have not associated it to a Player view.</p> <p>Once started, the scenario status is now Active and a new Execute option is available in the Task context menu.</p> <p>After tasks have been executed results are displayed in the task details. Each task is expandable. You will see a result listed for every single time that task gets executed. </p>"},{"location":"steamfitter/scenarios/#ending-a-scenario","title":"Ending a Scenario","text":"<p>Scenarios can also be ended. When a scenario is started, the Start Scenario button changes to End Scenario Now.</p>"},{"location":"steamfitter/scenarios/#a-note-about-stackstorm","title":"A note about StackStorm","text":"<p>Behind the scenes Steamfitter uses StackStorm (stackstorm.com) to execute these tasks.  StackStorm is an open source application that can connect applications, services, and workflows. Steamfitter uses StackStorm to send commands to the guest VMs using the StackStorm vSphere Action Pack, so that none of that communication occurs over the network.</p>"},{"location":"steamfitter/tasks/","title":"Index","text":""},{"location":"steamfitter/tasks/#steamfitter-tasks","title":"Steamfitter Tasks","text":"<p>A task is an action or command that can be executed against one or more topology resources (that is, a VM). Each task has a result. A result is a single output that is generated when a task is executed against a single topology resource - like a single VM. A result indicates success or failure and typically includes some text describing the outcome. </p> <p>A task has no results until it is executed. </p> <p>A task can have multiple results:</p> <ul> <li>a task defined to run against one VM will have one result for each time the task is executed</li> <li>a task defined to run against multiple VMs will have on result per VM - each time the task is executed. So, a task that runs against four VMs and is executed three times yields 12 results.</li> </ul>"},{"location":"steamfitter/tasks/#adding-a-task","title":"Adding a Task","text":"<p>Name: What this task is supposed to do.</p> <p>Description: Additional details about what the task does.</p>"},{"location":"steamfitter/tasks/#action","title":"Action","text":"<ul> <li> <p>Select an Action: Power on a VM, power off a VM, read a file, etc. An action is the name StackStorm gives to a single Task/Command.</p> </li> <li> <p>Trigger Condition: </p> </li> <li>Time: A timed trigger is executed automatically after a set delay in seconds. A timed trigger can have multiple iterations executed on a specific interval.  </li> <li>Manual: A manual trigger condition is executed by manual intervention - clicking a button, for example, to fire off a task. It's up to a user to intervene to execute the task. </li> <li>Completion: When the parent task completes the dependent task runs - regardless of success or failure.</li> <li>Success: If the expected output is contained in the actual output then the dependent task runs.</li> <li>Failure: Only runs if the expected output is not contained within the actual output. </li> </ul> <p>Expected Output: Whatever you type here, if the actual output contains that text, then it is considered a success. If the output does not contain what is typed here, then it is considered a failure.</p>"},{"location":"steamfitter/tasks/#delay-iteration-expiration","title":"Delay / Iteration / Expiration","text":"<ul> <li>Delay: Set in seconds before executing the task executes.</li> <li>Number of Iterations: An iteration is an execution of a task when the task is configured to iterate for x number of times. Enter the number of times you want the task to execute here.</li> <li>Interval Between Iterations: The time in seconds in between iterations. </li> <li>Iteration Termination: </li> <li>IterationCountTask: The task will execute until exactly the number of iteration times specified above; regardless of whether the task succeeds or fails.</li> <li>UntilSuccess: The task will iterate until the command has a successful completion.</li> <li>UntilFailure: The task will iterate until the command fails.</li> <li>Expiration Timeout: The time, in seconds, where if no response has been received the task expires (times out).  </li> </ul>"},{"location":"steamfitter/tasks/#vm-selection","title":"VM Selection","text":"<ul> <li>VM Mask: Tasks will run against Player VMs that include the text typed here. </li> <li>Choose Actual VMs: Enable Choose Actual VMs to select specific VMs; these are the VMs found in the selected Player view. </li> </ul>"},{"location":"steamfitter/tasks/#task-menu-and-dependent-tasks","title":"Task Menu and Dependent Tasks","text":"<p>Clicking the Task Menu on the newly created task will give you the context menu for the task: Edit, Copy, Cut, New, Delete, and Execute. Selecting New here, however, creates a new dependent task. A dependent task does not execute until the condition on the parent task is met.</p> <p>A task can be copied and pasted from any other scenario template, scenario, and task.</p>"}]}